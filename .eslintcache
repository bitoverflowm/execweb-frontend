[{"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\index.js":"1","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorAuth.js":"2","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequests.js":"3","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\pages\\AdminDashboard.js":"4","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\Home.js":"5","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\MainNavigation.js":"6","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\App.js":"7","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\NavLinks.js":"8","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\sponsorHome.js":"9","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequestDetails.js":"10","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\reportWebVitals.js":"11","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRole.js":"12","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetIndustry.js":"13","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHeadCount.js":"14","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRegion.js":"15","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsers.js":"16","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetDate.js":"17","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHost.js":"18","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetTopic.js":"19","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\SponsorRequest.js":"20","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Auth\\Profile.js":"21"},{"size":532,"mtime":1613524438019,"results":"22","hashOfConfig":"23"},{"size":2203,"mtime":1613628140164,"results":"24","hashOfConfig":"23"},{"size":1786,"mtime":1612221303634,"results":"25","hashOfConfig":"23"},{"size":1879,"mtime":1612222265721,"results":"26","hashOfConfig":"23"},{"size":1465,"mtime":1613732029556,"results":"27","hashOfConfig":"23"},{"size":386,"mtime":1612170812349,"results":"28","hashOfConfig":"23"},{"size":2501,"mtime":1613684685775,"results":"29","hashOfConfig":"23"},{"size":783,"mtime":1613628308248,"results":"30","hashOfConfig":"23"},{"size":1168,"mtime":1613681614011,"results":"31","hashOfConfig":"23"},{"size":1834,"mtime":1612225405328,"results":"32","hashOfConfig":"23"},{"size":362,"mtime":1611762160796,"results":"33","hashOfConfig":"23"},{"size":3198,"mtime":1613524438023,"results":"34","hashOfConfig":"23"},{"size":3085,"mtime":1613524438022,"results":"35","hashOfConfig":"23"},{"size":2621,"mtime":1613524438022,"results":"36","hashOfConfig":"23"},{"size":2607,"mtime":1613524438023,"results":"37","hashOfConfig":"23"},{"size":7664,"mtime":1613628308250,"results":"38","hashOfConfig":"23"},{"size":2561,"mtime":1613642189252,"results":"39","hashOfConfig":"23"},{"size":1833,"mtime":1612950621354,"results":"40","hashOfConfig":"23"},{"size":1799,"mtime":1612950715705,"results":"41","hashOfConfig":"23"},{"size":7387,"mtime":1613628167732,"results":"42","hashOfConfig":"23"},{"size":446,"mtime":1613524438020,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"wdh0zt",{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\index.js",[],["92","93"],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorAuth.js",["94","95","96"],"import React, { useReducer, useEffect } from 'react';\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nimport { Button, Typography } from 'antd';\r\n\r\nimport Profile from '../../shared/components/Auth/Profile';\r\n\r\nconst { Text } = Typography;\r\n\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val.username,\r\n                isValid: true\r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nconst SponsorAuth = props => {\r\n    \r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, isValid } = inputState;\r\n    const { loginWithRedirect, user, isAuthenticated, isLoading } = useAuth0();\r\n    \r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid)\r\n    }, [id, value, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = submission => {\r\n        console.log('Submitted Value', submission);\r\n        \r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: submission\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div className = 'response-field'>\r\n            <p>We will facilitate virtual roundtables with tech execs in your target market who are actively looking for new vendors.</p>\r\n            <p>You will need to answer a few questions, takes less than 2 minutes to complete, so that we can get you in front of the 5-10 most relevant to you tech executives.</p>\r\n            <p>You will need to to join using your LinkedIn account since we are an exclusive professional network and need to confirm everyone's professional identity.</p>\r\n            <p>Let's begin... </p>\r\n            {console.log('props value in linked validation: ', props.value)}\r\n            {isAuthenticated \r\n                ? <Text>Welcome {user.name} thank you for joining our community!</Text> \r\n                : <Button type=\"primary\" onClick={() => loginWithRedirect()/*clickHandler({username : \"John Doe\"})*/}> Connect to LinkedIn</Button>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SponsorAuth;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequests.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\pages\\AdminDashboard.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\Home.js",["97","98","99","100"],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\MainNavigation.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\App.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\NavLinks.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\sponsorHome.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequestDetails.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRole.js",["101"],"import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { Checkbox, Row, Col, Input, message } from 'antd';\r\n\r\nimport '../../index.css';\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nconst DUMMY_JOB_TITLE = [\r\n    {\r\n        id: 'j1',\r\n        title: 'Chief Information Officer'\r\n    },\r\n    {\r\n        id: 'j2',\r\n        title: 'Chief Executive Officer'\r\n    },\r\n    {\r\n        id: 'j3',\r\n        title: 'Chief Technology Officer'\r\n    },\r\n    {\r\n        id: 'j4',\r\n        title: 'Chief Operations Officer'\r\n    },\r\n    {\r\n        id: 'j5',\r\n        title: 'Chief Scientist'\r\n    },\r\n    {\r\n        id: 'j6',\r\n        title: 'Chief Security Officer'\r\n    },\r\n    {\r\n        id: 'j7',\r\n        title: 'Chief Data Officer'\r\n    },\r\n    {\r\n        id: 'j8',\r\n        title: 'Chief Compliance Officer'\r\n    },\r\n    {\r\n        id: 'j9',\r\n        title: 'Chief Product Officer'\r\n    }\r\n];\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: true\r\n            };\r\n        case 'TEXT':\r\n            return {\r\n                ...state,\r\n                textinput: action.val,\r\n                isValid: true \r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nconst SponsorTargetRole = props => {\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '',\r\n        textinput: '',\r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, textinput, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid, textinput)\r\n    }, [id, value, textinput, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    const onTextSubmission = value => {\r\n        console.log('newPosition text Entry', value);\r\n\r\n        dispatch({\r\n            type: 'TEXT',\r\n            val: value\r\n        });\r\n        message.success(value + ' Added to your submission!');\r\n    }\r\n\r\n\r\n    return(\r\n        <div className = 'response-field'>\r\n            <p>What are the job titles of your target clients?</p>\r\n            <Row>\r\n                <Checkbox.Group onChange={clickHandler} className=\"check-box-wrapper\">\r\n                        {DUMMY_JOB_TITLE.map( title => (\r\n                            <div key={title.id} className=\"check-box\">\r\n                                <Checkbox key={title.id} value={title.title}>\r\n                                    {title.title}\r\n                                </Checkbox>\r\n                            </div>\r\n                        ))}\r\n                </Checkbox.Group>\r\n            </Row>\r\n            <Row className= 'other-input'>\r\n                <p>Have a custom job title in mind?</p>\r\n                <Search placeholder=\"Enter job title here\" allowClear enterButton=\"+\" onSearch={onTextSubmission} />\r\n            </Row>\r\n            \r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetRole;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetIndustry.js",["102"],"import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { Checkbox, Row, Col, Input, message } from 'antd';\r\n\r\nimport { FireTwoTone, ExperimentTwoTone, CodeTwoTone, BankTwoTone } from '@ant-design/icons';\r\n\r\nimport '../../index.css';\r\n\r\nconst { Search } = Input;\r\n\r\nconst DUMMY_INDUSTRIES = [\r\n    {\r\n        id: 'i1',\r\n        title: 'Financial Services',\r\n        icon: <BankTwoTone twoToneColor=\"#FFB454\"/>\r\n    },\r\n    {\r\n        id: 'i2',\r\n        title: 'Technology',\r\n        icon: <CodeTwoTone twoToneColor=\"#AFE2DE\"/>\r\n    },\r\n    {\r\n        id: 'i3',\r\n        title: 'Pharma & Medicine',\r\n        icon: <ExperimentTwoTone twoToneColor=\"#FFB454\"/>\r\n    },\r\n    {\r\n        id: 'i4',\r\n        title: 'Energy',\r\n        icon: <FireTwoTone twoToneColor=\"#60C6BE\"/>\r\n    }\r\n]; \r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: true\r\n            };\r\n        case 'TEXT':\r\n            return {\r\n                ...state,\r\n                textinput: action.val,\r\n                isValid: true \r\n            };  \r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nconst SponsorTargetIndustry = props => {\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        textinput: '',\r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, textinput, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid, textinput)\r\n    }, [id, value, textinput, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    const onTextSubmission = value => {\r\n        console.log('newPosition text Entry', value);\r\n\r\n        dispatch({\r\n            type: 'TEXT',\r\n            val: value\r\n        });\r\n        message.success(value + ' Added to your submission!');\r\n    };\r\n\r\n    return(\r\n        <div className = 'response-field'>\r\n            <p>What industries are your target clients in?</p>\r\n            <Row >\r\n                <Checkbox.Group onChange={clickHandler} className=\"check-box-wrapper\">\r\n                    {DUMMY_INDUSTRIES.map( title => (\r\n                        <div key={title.id} className=\"check-box\">\r\n                            <Checkbox key={title.id} value={title.title}>\r\n                                {title.icon}{title.title}\r\n                            </Checkbox>\r\n                        </div>\r\n                        ))}\r\n                </Checkbox.Group>\r\n            </Row>\r\n            <Row className= 'other-input'>\r\n                <p>Have a custom industry in mind?</p>\r\n                <Search placeholder=\"Enter industry here\" allowClear enterButton=\"+\" onSearch={onTextSubmission} />\r\n            </Row>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetIndustry;\r\n","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHeadCount.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRegion.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsers.js",["103","104","105","106"],"import React, { useReducer, useEffect, useState } from 'react';\r\n\r\nimport '../../index.css';\r\n\r\nimport { Checkbox, Row, Col, Typography, Avatar, Spin, Popover, Button, Tag, Divider, Descriptions } from 'antd';\r\n\r\nconst { Text } = Typography;\r\n\r\nconst DUMMY_USER_DATA = [\r\n    {\r\n        id: '1',\r\n        first_name: 'Sterling',\r\n        last_name: 'Archer',\r\n        position: 'Spy',\r\n        company: 'Figgis Agency',\r\n        avatar: 'https://pbs.twimg.com/profile_images/473693408649674753/Fjo74UD2.png'\r\n    },\r\n    {\r\n        id: '2',\r\n        first_name: 'Bob',\r\n        last_name: 'Burger',\r\n        position: 'Burger Maker',\r\n        company: 'Bobs Burger',\r\n        avatar: 'https://www.gannett-cdn.com/presto/2020/06/12/PPHX/e7207da9-6fbe-467b-b63e-ac44e95db582-BobsBurgers_2019_KeyPoses_Bob_1.jpg?crop=3356,1888,x0,y480&width=3200&height=1801&format=pjpg&auto=webp'\r\n    },\r\n    {\r\n        id: '3',\r\n        first_name: 'Kristin',\r\n        last_name: 'Watson',\r\n        position: 'Project Manager',\r\n        company: 'Heinemann',\r\n        avatar: 'https://pbs.twimg.com/profile_images/473693408649674753/Fjo74UD2.png'\r\n    }\r\n]; \r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: true\r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst SponsorTargetUsers = props => {\r\n    \r\n    const searchParams = props.value;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [filteredUsers, setFilteredUsers] = useState();\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            setIsLoading(true);\r\n            try\r\n            {\r\n                console.log(\"searching on the following params: \",  searchParams);\r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/sponsors/userSearch', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        jobTitles  : searchParams.roles.value,\r\n                        industries : searchParams.industries.value,\r\n                    })\r\n                });\r\n\r\n                const responseData = await response.json();\r\n\r\n                if(!response.ok){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                console.log('Filtered users:', responseData)\r\n                setFilteredUsers(responseData.filteredUsers);\r\n                setIsLoading(false);\r\n            } catch (err) {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid)\r\n    }, [id, value, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    return(\r\n        <div className = 'response-field'> \r\n            <p>\r\n                <Text>The following executives best match your target client parameters.</Text>\r\n                <br></br>\r\n                <Text keyboard> Select up to 15 tech executives you would like to have attend your virtual round table you sponsor.</Text>\r\n            </p>\r\n                \r\n            <Row>\r\n                {!isLoading && filteredUsers\r\n                    ? (\r\n                        <Checkbox.Group onChange={clickHandler} className=\"check-box-wrapper\">\r\n                            {filteredUsers.map( user => (\r\n                                <div key={user.item[\"_id\"]} className=\"check-box\">\r\n                                        <Row>\r\n                                            <Col span= {1}className=\"check-box-style\">\r\n                                                <Checkbox value={user.item[\"_id\"]}/>\r\n                                            </Col>\r\n                                            <Col span={9}>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Avatar size={64} src={user.item[\"Personal Photo\"]}/>\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={user.item[\"Personal Description\"]} title=\"Description\" overlayClassName=\"popover-content\">\r\n                                                        <Button type=\"primary\">Description</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={user.item[\"Experience\"]} title=\"Experience\" overlayClassName=\"popover-content\">\r\n                                                        <Button>Experience</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                            </Col>\r\n                                            <Col span={14}>\r\n                                                <Row>\r\n                                                    <Text strong>{\" \" + user.item[\"First Name\"] + \" \" + user.item[\"Last Name\"]}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Title: {user.item.Position}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Company: {user.item.Company}</Text>\r\n                                                </Row>   \r\n                                                <Row>\r\n                                                    <Text>Location: {user.item.State}</Text>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag >Est. Employees: {user.item[\"# of Employees\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Industry: {user.item[\"Industry\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Est. Revenue: {user.item[\"Estimated Revenues\"]}</Tag>\r\n                                                </Row> \r\n                                            </Col>\r\n                                        </Row>\r\n                                </div>\r\n                            ))}\r\n                        </Checkbox.Group>\r\n                    )\r\n                    : (\r\n                        <Spin />\r\n                    )\r\n                }\r\n            </Row>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetUsers;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetDate.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHost.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetTopic.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\SponsorRequest.js",["107"],"import React, { useState, useReducer, useCallback } from 'react';\r\n\r\nimport { Form, Steps, Button, message } from 'antd';\r\n\r\nimport SponsorAuth from '../components/SponsorAuth';\r\nimport SponsorTargetRole from '../components/SponsorTargetRole';\r\nimport SponsorTargetIndustry from '../components/SponsorTargetIndustry';\r\nimport SponsorTargetHeadCount from '../components/SponsorTargetHeadCount';\r\nimport SponsorTargetRegion from '../components/SponsorTargetRegion';\r\nimport SponsorTargetUsers from '../components/SponsorTargetUsers';\r\nimport SponsorTargetDate from '../components/SponsorTargetDate';\r\nimport SponsorTargetTopic from '../components/SponsorTargetTopic';\r\nimport SponsorTargetHost from '../components/SponsorTargetHost';\r\n\r\nimport '../../index.css';\r\n\r\nconst { Step } = Steps;\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SELECT':\r\n            let formIsValid = true;\r\n            /*for (const inputId in state.inputs){\r\n                if(inputId === action.inputId){\r\n                    formIsValid = formIsValid && action.isValid;\r\n                }\r\n                TODO: Add form validation logic here;\r\n            }*/\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId] : { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst SponsorRequest = () => {\r\n\r\n    const [current, setCurrent] = useState(0);\r\n\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n            inputs: {\r\n                username: { value: '', isValid: false},\r\n                roles: { value: '', isValid: false},\r\n                industries: { value: '', isValid: false}\r\n            }, isValid: false});\r\n\r\n    const formUpdateHandler = useCallback(( id, value, isValid, textInput = null ) => { \r\n        console.log(`formUpdateHandler id: ${id} value: ${value} isValid: ${isValid}`);\r\n        if(textInput && value){\r\n            value.push(textInput);\r\n        } else if (textInput && !value){\r\n            value = textInput;\r\n        }\r\n        dispatch({type: 'SELECT', value: value, inputId: id, isValid: isValid});\r\n    }, []);\r\n\r\n    const steps = [\r\n        { \r\n            title: 'Step 1', \r\n            content: \r\n            <SponsorAuth \r\n                id=\"username\"\r\n                formUpdateHandler={formUpdateHandler} \r\n                value={formState.inputs.username}/> \r\n        },\r\n        { \r\n            title: 'Step 2', \r\n            content: \r\n            <SponsorTargetRole\r\n                id=\"roles\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.roles}/> \r\n        },\r\n        { \r\n            title: 'Step 3', \r\n            content: \r\n            <SponsorTargetIndustry \r\n                id=\"industries\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.industries}/> \r\n        },\r\n        { \r\n            title: 'Step 4', \r\n            content: \r\n            <SponsorTargetHeadCount \r\n                id=\"headCounts\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.headCounts}/> \r\n        },\r\n        { \r\n            title: 'Step 5', \r\n            content: \r\n            <SponsorTargetRegion\r\n                id=\"regions\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.regions}/>\r\n        },\r\n        { \r\n            title: 'Step 6', \r\n            content: \r\n            <SponsorTargetUsers \r\n                id=\"users\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs}/>\r\n        },\r\n        { \r\n            title: 'Step 7', \r\n            content: \r\n            <SponsorTargetDate \r\n                id=\"dates\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.dates}/>\r\n        },\r\n        { \r\n            title: 'Step 8', \r\n            content: \r\n            <SponsorTargetTopic \r\n                id=\"topic\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.topic}/>\r\n        },\r\n        { \r\n            title: 'Step 9', \r\n            content: \r\n            <SponsorTargetHost \r\n                id=\"host\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.host}/>\r\n        },\r\n    ];\r\n\r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n        console.log(\"triggering next: current formState: \", formState);\r\n    };\r\n\r\n    // Prev is currently disabled as it jsut complicated the state management\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n\r\n    const onFinish = async event => {\r\n        console.log('Submitting completed form: ', formState);\r\n\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/sponsors/sponsorRequest', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    jobTitles  : formState.inputs.roles.value,\r\n                    industries : formState.inputs.industries.value, \r\n                    clientList : 'text.csv',\r\n                    headCounts : formState.inputs.headCounts.value,\r\n                    regions    : formState.inputs.regions.value,\r\n                    users      : formState.inputs.users.value,\r\n                    dateStart  : formState.inputs.dates.value[0],\r\n                    dateEnd    : formState.inputs.dates.value[1],\r\n                    topic      : formState.inputs.topic.value[0],\r\n                    host       : formState.inputs.host.value[0],\r\n                    sponsor    : 1,\r\n                })\r\n            });\r\n            \r\n            const responseData = await response.json();\r\n            console.log('Server response: ', responseData);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }       \r\n        \r\n      };\r\n\r\n    return (\r\n        <Form className = \"site-layout-content\" onFinish={onFinish}>\r\n            <Steps current={current}>\r\n                {steps.map(item => (\r\n                    <Step key={item.title} hidden />\r\n                ))}\r\n            </Steps>\r\n            \r\n            <div className=\"response-field\">\r\n                {steps[current].content}\r\n            </div>\r\n            \r\n            <div className=\"response-action\">\r\n                {current < steps.length - 1 && (\r\n                    <Button type=\"primary\" onClick={() => next()}>\r\n                        Next\r\n                    </Button>\r\n                )}\r\n                {/*current > 0 && (\r\n                    <Button onClick={() => prev()}>\r\n                        Previous\r\n                    </Button>\r\n                )*/}                \r\n                {current === steps.length - 1 && (\r\n                    <Button type=\"primary\" htmlType=\"submit\" onClick={() => message.success('Processing complete!')}>\r\n                        Done\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </Form>\r\n    )\r\n};\r\n\r\nexport default SponsorRequest;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Auth\\Profile.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":6,"column":8,"nodeType":"114","messageId":"115","endLine":6,"endColumn":15},{"ruleId":"112","severity":1,"message":"116","line":34,"column":55,"nodeType":"114","messageId":"115","endLine":34,"endColumn":64},{"ruleId":"112","severity":1,"message":"117","line":41,"column":11,"nodeType":"114","messageId":"115","endLine":41,"endColumn":23},{"ruleId":"112","severity":1,"message":"118","line":4,"column":31,"nodeType":"114","messageId":"115","endLine":4,"endColumn":34},{"ruleId":"119","severity":1,"message":"120","line":18,"column":21,"nodeType":"121","endLine":18,"endColumn":43},{"ruleId":"119","severity":1,"message":"120","line":28,"column":25,"nodeType":"121","endLine":28,"endColumn":79},{"ruleId":"119","severity":1,"message":"120","line":31,"column":25,"nodeType":"121","endLine":31,"endColumn":74},{"ruleId":"112","severity":1,"message":"118","line":3,"column":25,"nodeType":"114","messageId":"115","endLine":3,"endColumn":28},{"ruleId":"112","severity":1,"message":"118","line":3,"column":25,"nodeType":"114","messageId":"115","endLine":3,"endColumn":28},{"ruleId":"112","severity":1,"message":"122","line":5,"column":78,"nodeType":"114","messageId":"115","endLine":5,"endColumn":85},{"ruleId":"112","severity":1,"message":"123","line":5,"column":87,"nodeType":"114","messageId":"115","endLine":5,"endColumn":99},{"ruleId":"112","severity":1,"message":"124","line":9,"column":7,"nodeType":"114","messageId":"115","endLine":9,"endColumn":22},{"ruleId":"125","severity":1,"message":"126","line":86,"column":8,"nodeType":"127","endLine":86,"endColumn":10,"suggestions":"128"},{"ruleId":"112","severity":1,"message":"129","line":144,"column":11,"nodeType":"114","messageId":"115","endLine":144,"endColumn":15},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","'clickHandler' is assigned a value but never used.","'Col' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Divider' is defined but never used.","'Descriptions' is defined but never used.","'DUMMY_USER_DATA' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchParams'. Either include it or remove the dependency array.","ArrayExpression",["132"],"'prev' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},"Update the dependencies array to be: [searchParams]",{"range":"135","text":"136"},[2802,2804],"[searchParams]"]