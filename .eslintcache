[{"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\index.js":"1","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorAuth.js":"2","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequests.js":"3","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\pages\\AdminDashboard.js":"4","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\Home.js":"5","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\MainNavigation.js":"6","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\App.js":"7","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\NavLinks.js":"8","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\sponsorHome.js":"9","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequestDetails.js":"10","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\reportWebVitals.js":"11","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRole.js":"12","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetIndustry.js":"13","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHeadCount.js":"14","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRegion.js":"15","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsers.js":"16","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetDate.js":"17","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHost.js":"18","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetTopic.js":"19","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\SponsorRequest.js":"20","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Auth\\Profile.js":"21","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsersList.js":"22","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorSummary.js":"23"},{"size":532,"mtime":1613524438019,"results":"24","hashOfConfig":"25"},{"size":2276,"mtime":1613942662407,"results":"26","hashOfConfig":"25"},{"size":1786,"mtime":1612221303634,"results":"27","hashOfConfig":"25"},{"size":1879,"mtime":1612222265721,"results":"28","hashOfConfig":"25"},{"size":3537,"mtime":1613985356430,"results":"29","hashOfConfig":"25"},{"size":386,"mtime":1612170812349,"results":"30","hashOfConfig":"25"},{"size":2501,"mtime":1613684685775,"results":"31","hashOfConfig":"25"},{"size":760,"mtime":1613738008144,"results":"32","hashOfConfig":"25"},{"size":302,"mtime":1613735733091,"results":"33","hashOfConfig":"25"},{"size":1834,"mtime":1612225405328,"results":"34","hashOfConfig":"25"},{"size":362,"mtime":1611762160796,"results":"35","hashOfConfig":"25"},{"size":3282,"mtime":1613989733016,"results":"36","hashOfConfig":"25"},{"size":3085,"mtime":1613524438022,"results":"37","hashOfConfig":"25"},{"size":2623,"mtime":1613741469046,"results":"38","hashOfConfig":"25"},{"size":2607,"mtime":1613739791730,"results":"39","hashOfConfig":"25"},{"size":7664,"mtime":1613628308250,"results":"40","hashOfConfig":"25"},{"size":2802,"mtime":1613970065152,"results":"41","hashOfConfig":"25"},{"size":1833,"mtime":1612950621354,"results":"42","hashOfConfig":"25"},{"size":1799,"mtime":1612950715705,"results":"43","hashOfConfig":"25"},{"size":11055,"mtime":1613972139692,"results":"44","hashOfConfig":"25"},{"size":529,"mtime":1613872520887,"results":"45","hashOfConfig":"25"},{"size":7699,"mtime":1613897959813,"results":"46","hashOfConfig":"25"},{"size":1658,"mtime":1613970398637,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"wdh0zt",{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\index.js",[],["102","103"],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorAuth.js",["104","105","106"],"import React, { useReducer, useEffect } from 'react';\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nimport { Button, Typography } from 'antd';\r\n\r\nimport { LinkedinOutlined } from '@ant-design/icons';\r\n\r\nimport Profile from '../../shared/components/Auth/Profile';\r\n\r\nconst { Text } = Typography;\r\n\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: true\r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nconst SponsorAuth = props => {\r\n    \r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, isValid } = inputState;\r\n    const { loginWithRedirect, user, isAuthenticated, isLoading } = useAuth0();\r\n    \r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid)\r\n    }, [id, value, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = submission => {\r\n        console.log('Submitted Value', submission);\r\n        loginWithRedirect();   \r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: user\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div className = 'response-field'>\r\n            <p>We will facilitate virtual roundtables with tech execs in your target market who are actively looking for new vendors.</p>\r\n            <p>You will need to answer a few questions, takes less than 2 minutes to complete, so that we can get you in front of the 5-10 most relevant to you tech executives.</p>\r\n            <p>You will need to to join using your LinkedIn account since we are an exclusive professional network and need to confirm everyone's professional identity.</p>\r\n            <p>Let's begin... </p>\r\n            {console.log('props value in linked validation: ', props.value)}\r\n            <div className= \"linkedin-auth-wrapper\">\r\n                {isAuthenticated \r\n                    ? <Profile />\r\n                    : <Button type=\"primary\" className=\"linkedin-auth\" onClick={() => clickHandler()}>  Connect to LinkedIn</Button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SponsorAuth;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequests.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\pages\\AdminDashboard.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\Home.js",["107","108","109"],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\MainNavigation.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\App.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\NavLinks.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\sponsorHome.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequestDetails.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRole.js",["110"],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetIndustry.js",["111"],"import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { Checkbox, Row, Col, Input, message } from 'antd';\r\n\r\nimport { FireTwoTone, ExperimentTwoTone, CodeTwoTone, BankTwoTone } from '@ant-design/icons';\r\n\r\nimport '../../index.css';\r\n\r\nconst { Search } = Input;\r\n\r\nconst DUMMY_INDUSTRIES = [\r\n    {\r\n        id: 'i1',\r\n        title: 'Financial Services',\r\n        icon: <BankTwoTone twoToneColor=\"#FFB454\"/>\r\n    },\r\n    {\r\n        id: 'i2',\r\n        title: 'Technology',\r\n        icon: <CodeTwoTone twoToneColor=\"#AFE2DE\"/>\r\n    },\r\n    {\r\n        id: 'i3',\r\n        title: 'Pharma & Medicine',\r\n        icon: <ExperimentTwoTone twoToneColor=\"#FFB454\"/>\r\n    },\r\n    {\r\n        id: 'i4',\r\n        title: 'Energy',\r\n        icon: <FireTwoTone twoToneColor=\"#60C6BE\"/>\r\n    }\r\n]; \r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: true\r\n            };\r\n        case 'TEXT':\r\n            return {\r\n                ...state,\r\n                textinput: action.val,\r\n                isValid: true \r\n            };  \r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nconst SponsorTargetIndustry = props => {\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        textinput: '',\r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, textinput, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid, textinput)\r\n    }, [id, value, textinput, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    const onTextSubmission = value => {\r\n        console.log('newPosition text Entry', value);\r\n\r\n        dispatch({\r\n            type: 'TEXT',\r\n            val: value\r\n        });\r\n        message.success(value + ' Added to your submission!');\r\n    };\r\n\r\n    return(\r\n        <div className = 'response-field'>\r\n            <p>What industries are your target clients in?</p>\r\n            <Row >\r\n                <Checkbox.Group onChange={clickHandler} className=\"check-box-wrapper\">\r\n                    {DUMMY_INDUSTRIES.map( title => (\r\n                        <div key={title.id} className=\"check-box\">\r\n                            <Checkbox key={title.id} value={title.title}>\r\n                                {title.icon}{title.title}\r\n                            </Checkbox>\r\n                        </div>\r\n                        ))}\r\n                </Checkbox.Group>\r\n            </Row>\r\n            <Row className= 'other-input'>\r\n                <p>Have a custom industry in mind?</p>\r\n                <Search placeholder=\"Enter industry here\" allowClear enterButton=\"+\" onSearch={onTextSubmission} />\r\n            </Row>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetIndustry;\r\n","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHeadCount.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRegion.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsers.js",["112","113","114","115"],"import React, { useReducer, useEffect, useState } from 'react';\r\n\r\nimport '../../index.css';\r\n\r\nimport { Checkbox, Row, Col, Typography, Avatar, Spin, Popover, Button, Tag, Divider, Descriptions } from 'antd';\r\n\r\nconst { Text } = Typography;\r\n\r\nconst DUMMY_USER_DATA = [\r\n    {\r\n        id: '1',\r\n        first_name: 'Sterling',\r\n        last_name: 'Archer',\r\n        position: 'Spy',\r\n        company: 'Figgis Agency',\r\n        avatar: 'https://pbs.twimg.com/profile_images/473693408649674753/Fjo74UD2.png'\r\n    },\r\n    {\r\n        id: '2',\r\n        first_name: 'Bob',\r\n        last_name: 'Burger',\r\n        position: 'Burger Maker',\r\n        company: 'Bobs Burger',\r\n        avatar: 'https://www.gannett-cdn.com/presto/2020/06/12/PPHX/e7207da9-6fbe-467b-b63e-ac44e95db582-BobsBurgers_2019_KeyPoses_Bob_1.jpg?crop=3356,1888,x0,y480&width=3200&height=1801&format=pjpg&auto=webp'\r\n    },\r\n    {\r\n        id: '3',\r\n        first_name: 'Kristin',\r\n        last_name: 'Watson',\r\n        position: 'Project Manager',\r\n        company: 'Heinemann',\r\n        avatar: 'https://pbs.twimg.com/profile_images/473693408649674753/Fjo74UD2.png'\r\n    }\r\n]; \r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: true\r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst SponsorTargetUsers = props => {\r\n    \r\n    const searchParams = props.value;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [filteredUsers, setFilteredUsers] = useState();\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            setIsLoading(true);\r\n            try\r\n            {\r\n                console.log(\"searching on the following params: \",  searchParams);\r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/sponsors/userSearch', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        jobTitles  : searchParams.roles.value,\r\n                        industries : searchParams.industries.value,\r\n                    })\r\n                });\r\n\r\n                const responseData = await response.json();\r\n\r\n                if(!response.ok){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                console.log('Filtered users:', responseData)\r\n                setFilteredUsers(responseData.filteredUsers);\r\n                setIsLoading(false);\r\n            } catch (err) {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid)\r\n    }, [id, value, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    return(\r\n        <div className = 'response-field'> \r\n            <p>\r\n                <Text>The following executives best match your target client parameters.</Text>\r\n                <br></br>\r\n                <Text keyboard> Select up to 15 tech executives you would like to have attend your virtual round table you sponsor.</Text>\r\n            </p>\r\n                \r\n            <Row>\r\n                {!isLoading && filteredUsers\r\n                    ? (\r\n                        <Checkbox.Group onChange={clickHandler} className=\"check-box-wrapper\">\r\n                            {filteredUsers.map( user => (\r\n                                <div key={user.item[\"_id\"]} className=\"check-box\">\r\n                                        <Row>\r\n                                            <Col span= {1}className=\"check-box-style\">\r\n                                                <Checkbox value={user.item[\"_id\"]}/>\r\n                                            </Col>\r\n                                            <Col span={9}>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Avatar size={64} src={user.item[\"Personal Photo\"]}/>\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={user.item[\"Personal Description\"]} title=\"Description\" overlayClassName=\"popover-content\">\r\n                                                        <Button type=\"primary\">Description</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={user.item[\"Experience\"]} title=\"Experience\" overlayClassName=\"popover-content\">\r\n                                                        <Button>Experience</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                            </Col>\r\n                                            <Col span={14}>\r\n                                                <Row>\r\n                                                    <Text strong>{\" \" + user.item[\"First Name\"] + \" \" + user.item[\"Last Name\"]}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Title: {user.item.Position}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Company: {user.item.Company}</Text>\r\n                                                </Row>   \r\n                                                <Row>\r\n                                                    <Text>Location: {user.item.State}</Text>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag >Est. Employees: {user.item[\"# of Employees\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Industry: {user.item[\"Industry\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Est. Revenue: {user.item[\"Estimated Revenues\"]}</Tag>\r\n                                                </Row> \r\n                                            </Col>\r\n                                        </Row>\r\n                                </div>\r\n                            ))}\r\n                        </Checkbox.Group>\r\n                    )\r\n                    : (\r\n                        <Spin />\r\n                    )\r\n                }\r\n            </Row>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetUsers;",["116","117"],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetDate.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHost.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetTopic.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\SponsorRequest.js",["118","119"],"import React, { useState, useReducer, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nimport { Form, Steps, Button, message, Row, Col } from 'antd';\r\n\r\nimport SponsorAuth from '../components/SponsorAuth';\r\nimport SponsorTargetRole from '../components/SponsorTargetRole';\r\nimport SponsorTargetIndustry from '../components/SponsorTargetIndustry';\r\nimport SponsorTargetHeadCount from '../components/SponsorTargetHeadCount';\r\nimport SponsorTargetRegion from '../components/SponsorTargetRegion';\r\nimport SponsorSummary from '../components/SponsorSummary';\r\nimport SponsorTargetUsersList from '../components/SponsorTargetUsersList';\r\nimport SponsorTargetDate from '../components/SponsorTargetDate';\r\nimport SponsorTargetTopic from '../components/SponsorTargetTopic';\r\nimport SponsorTargetHost from '../components/SponsorTargetHost';\r\n\r\nimport '../../index.css';\r\nimport formImage0 from '../../shared/assets/sponsor-request-images/0.jpg';\r\nimport formImage1 from '../../shared/assets/sponsor-request-images/1.jpg';\r\nimport formImage2 from '../../shared/assets/sponsor-request-images/2.jpg';\r\nimport formImage3 from '../../shared/assets/sponsor-request-images/3.jpg';\r\nimport formImage4 from '../../shared/assets/sponsor-request-images/4.jpg';\r\nimport formImage5 from '../../shared/assets/sponsor-request-images/5.jpg';\r\nimport formImage6 from '../../shared/assets/sponsor-request-images/6.jpg';\r\n\r\nimport logo from '../../shared/assets/logo2.png';\r\n\r\nconst { Step } = Steps;\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SELECT':\r\n            let formIsValid = true;\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId] : { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst SponsorRequest = () => {\r\n\r\n    const [current, setCurrent] = useState(0);\r\n    \r\n    const { user } = useAuth0();\r\n\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n            inputs: {\r\n                username: { value: '', isValid: false},\r\n                roles: { value: '', isValid: false},\r\n                industries: { value: '', isValid: false}\r\n            }, isValid: false});\r\n\r\n    const formUpdateHandler = useCallback(( id, value, isValid, textInput = null ) => { \r\n        console.log(`formUpdateHandler id: ${id} value: ${value} textInput: ${textInput} isValid: ${isValid}`);\r\n        if(textInput && value){\r\n            value.push(textInput);\r\n        } else if (textInput && !value){\r\n            value = textInput;\r\n        }\r\n        dispatch({type: 'SELECT', value: value, inputId: id, isValid: isValid});\r\n    }, []);\r\n\r\n    const steps = [\r\n        { \r\n            title: 'Step 1', \r\n            content:  <SponsorAuth \r\n                        id=\"username\"\r\n                        formUpdateHandler={formUpdateHandler} \r\n                        value={formState.inputs.username}\r\n                        />,\r\n            image: <img src={formImage0} alt=\"formImage0\" className=\"response-field-image\" />\r\n                        \r\n        },\r\n        { \r\n            title: 'Step 2', \r\n            content: \r\n                <SponsorTargetRole\r\n                    id=\"roles\"\r\n                    formUpdateHandler={formUpdateHandler}\r\n                    value={formState.inputs.roles}/>,\r\n            image: <img src={formImage1} alt=\"formImage1\" className=\"response-field-image\" />\r\n        },\r\n        { \r\n            title: 'Step 3', \r\n            content: \r\n            <SponsorTargetIndustry \r\n                id=\"industries\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.industries}/>,\r\n            image: <img src={formImage2} alt=\"formImage2\" className=\"response-field-image\" /> \r\n        },\r\n        { \r\n            title: 'Step 4', \r\n            content: \r\n            <SponsorTargetHeadCount \r\n                id=\"headCounts\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.headCounts}/>,\r\n            image: <img src={formImage3} alt=\"formImage3\" className=\"response-field-image\" /> \r\n        },\r\n        { \r\n            title: 'Step 5', \r\n            content: \r\n            <SponsorTargetRegion\r\n                id=\"regions\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.regions}/>,\r\n            image: <img src={formImage4} alt=\"formImage4\" className=\"response-field-image\" />\r\n        },\r\n        { \r\n            title: 'Step 6', \r\n            content: \r\n            <SponsorTargetUsersList \r\n                id=\"users\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs}/>,\r\n            image: <img src={formImage5} alt=\"formImage5\" className=\"response-field-image\" />\r\n        },\r\n        { \r\n            title: 'Step 7', \r\n            content: \r\n            <SponsorTargetDate \r\n                id=\"dates\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.dates}/>,\r\n            image: <img src={formImage6} alt=\"formImage6\" className=\"response-field-image\"/>\r\n        },\r\n        { \r\n            title: 'Step 8', \r\n            content: \r\n            <SponsorTargetTopic \r\n                id=\"topic\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.topic}/>,\r\n            image: <img src={formImage6} alt=\"formImage6\" className=\"response-field-image\"/>\r\n        },\r\n        { \r\n            title: 'Step 9', \r\n            content: \r\n            <SponsorTargetHost \r\n                id=\"host\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.host}/>,\r\n            image: <img src={formImage6} alt=\"formImage6\" className=\"response-field-image\"/>\r\n        },\r\n        { \r\n            title: 'Step 10', \r\n            content: \r\n            <SponsorSummary \r\n                id=\"summary\"\r\n                data={formState.inputs}/>,\r\n            image: <img src={formImage6} alt=\"formImage6\" className=\"response-field-image\"/>\r\n        },\r\n        { \r\n            title: 'Step 11', \r\n            content: \r\n            <div>\r\n                Thank You for Your Submission!\r\n            </div>,\r\n            image: <img src={formImage6} alt=\"formImage6\" className=\"response-field-image\"/>\r\n        },\r\n\r\n\r\n\r\n    ];\r\n\r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n        console.log(\"triggering next: current formState: \", formState);\r\n    };\r\n\r\n    // Prev is currently disabled as it jsut complicated the state management\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n\r\n    const confirmationHandler = async event => {\r\n        console.log('Submitting completed form: ', formState);\r\n        \r\n        // Form submission body creation\r\n        let payload;\r\n        try {\r\n            payload = JSON.stringify({\r\n                jobTitles  : formState.inputs.roles.value,\r\n                industries : formState.inputs.industries.value, \r\n                clientList : 'text.csv',\r\n                headCounts : formState.inputs.headCounts.value,\r\n                regions    : formState.inputs.regions.value,\r\n                users      : formState.inputs.users.value,\r\n                dates      : formState.inputs.dates.value,\r\n                topic      : formState.inputs.topic.value[0],\r\n                host       : formState.inputs.host.value[0],\r\n                sponsor    : user ? user.email : 1,\r\n            })\r\n        }\r\n        catch (err){\r\n            console.log('Error in payload body creation');\r\n            console.log(err);\r\n        }\r\n\r\n        console.log(\"Sponsorship Payload: \", payload);\r\n\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/sponsors/sponsorRequest', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                body: payload\r\n            });            \r\n            const responseData = await response.json();\r\n            console.log('Server response: ', responseData);\r\n            setCurrent(current + 1);         \r\n        } catch (err) {\r\n            console.log(err);\r\n        }; \r\n      };\r\n\r\n    return (\r\n        <Form className = \"site-layout-content\">\r\n            <Steps current={current}>\r\n                {console.log( \"hard look at formstate \", formState )}\r\n                {steps.map(item => (\r\n                    <Step key={item.title} hidden />\r\n                ))}\r\n            </Steps>\r\n            \r\n            <Row>\r\n                <Col span={12}>\r\n                    <div className=\"response-field-wrapper\">\r\n                        <Row>\r\n                            <img src={logo} alt=\"Logo\" className=\"logo\"/>\r\n                        </Row>\r\n                        <Row className=\"response-field\">\r\n                            {steps[current].content}\r\n                        </Row>\r\n\r\n                        <div className=\"response-action\">\r\n                            {current < steps.length - 1 && user && (\r\n                                <Button type=\"primary\" onClick={() => next()}>\r\n                                    Next\r\n                                </Button>\r\n                            )}\r\n                            {process.env.REACT_APP_BACKEND_URL === 'http://localhost:5000/api' && current < steps.length - 2 && (\r\n                                <Button type=\"primary\" onClick={() => next()}>\r\n                                    Next\r\n                                </Button>\r\n                            )}\r\n                            {/*current > 0 && (\r\n                                <Button onClick={() => prev()}>\r\n                                    Previous\r\n                                </Button>\r\n                            )*/}                \r\n                            {current === steps.length - 2 && (\r\n                                <Button className=\"response-submit\" type=\"primary\" htmlType=\"submit\" onClick={() => confirmationHandler()}>\r\n                                    Confirm Request\r\n                                </Button>\r\n                            )}\r\n                            {current === steps.length - 1 && (\r\n                                <Link to={`/`} className=\"home-call-to-action\">\r\n                                    <Button type=\"primary\">Back to Home</Button>\r\n                                </Link>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col span={10}>\r\n                    {steps[current].image}\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    )\r\n};\r\n\r\nexport default SponsorRequest;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Auth\\Profile.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsersList.js",["120","121","122","123"],"import React, { useReducer, useEffect, useState } from 'react';\r\n\r\nimport '../../index.css';\r\n\r\nimport { Checkbox, Row, Col, Typography, Avatar, Spin, Popover, Button, Tag, Divider, Descriptions, List } from 'antd';\r\n\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\nconst { Text } = Typography;\r\n\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: [... new Set([...state.value].concat(action.val))],\r\n                isValid: true\r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst SponsorTargetUsersList = props => {\r\n    \r\n    const searchParams = props.value;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [filteredUsers, setFilteredUsers] = useState();\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            setIsLoading(true);\r\n            try\r\n            {\r\n                console.log(\"searching on the following params: \",  searchParams);\r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/sponsors/userSearch', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        jobTitles  : searchParams.roles.value,\r\n                        industries : searchParams.industries.value,\r\n                    })\r\n                });\r\n\r\n                const responseData = await response.json();\r\n\r\n                if(!response.ok){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                console.log('Filtered users:', responseData)\r\n                setFilteredUsers(responseData.filteredUsers);\r\n                setIsLoading(false);\r\n            } catch (err) {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid)\r\n    }, [id, value, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    return(\r\n        <div className = 'response-field'> \r\n            <p>\r\n                <Text>The following executives best match your target client parameters.</Text>\r\n                <br></br>\r\n                <Text keyboard> Select up to 15 tech executives you would like to have attend your virtual round table you sponsor.</Text>\r\n            </p>\r\n                \r\n            <Row>\r\n                {!isLoading && filteredUsers\r\n                    ? (\r\n                        <Checkbox.Group onChange={clickHandler} className= \"user-checkbox-wrapper\">\r\n                            <List                                 \r\n                                dataSource ={filteredUsers}\r\n                                pagination={{\r\n                                    onChange: page => {\r\n                                        console.log(page);\r\n                                    },\r\n                                    pageSize: 3,\r\n                                    showSizeChanger : false\r\n                                }}\r\n                                renderItem={\r\n                                    item => (\r\n                                        <List.Item key={item.item[\"_id\"]} className=\"check-box\">\r\n                                            <Col span= {1}className=\"check-box-style\">\r\n                                                <Checkbox value={ item.item[\"_id\"] }/>\r\n                                            </Col>\r\n                                            <Col span={9}>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Avatar size={64} \r\n                                                        src= {item.item[\"Personal Photo\"] !== 'Image NA' && item.item[\"Personal Photo\"] }\r\n                                                        icon = { item.item[\"Personal Photo\"] === 'Image NA' && <UserOutlined /> }\r\n                                                            />\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={item.item[\"Personal Description\"]} title=\"Description\" overlayClassName=\"popover-content\">\r\n                                                        <Button type=\"primary\">Description</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={item.item[\"Experience\"]} title=\"Experience\" overlayClassName=\"popover-content\">\r\n                                                        <Button>Experience</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                            </Col>\r\n                                            <Col span={13}>\r\n                                                <Row>\r\n                                                    <Text strong>{\" \" + item.item[\"First Name\"] + \" \" + item.item[\"Last Name\"]}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Title: {item.item.Position}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Company: {item.item.Company}</Text>\r\n                                                </Row>   \r\n                                                <Row>\r\n                                                    <Text>Location: {item.item.State}</Text>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag >Est. Employees: {item.item[\"# of Employees\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Industry: {item.item[\"Industry\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Est. Revenue: {item.item[\"Estimated Revenues\"]}</Tag>\r\n                                                </Row> \r\n                                            </Col>\r\n                                        </List.Item>\r\n                                    )\r\n                                }\r\n                            />\r\n                        </Checkbox.Group>\r\n                    )\r\n                    : (\r\n                        <Spin />\r\n                    )\r\n                }\r\n            </Row>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetUsersList;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorSummary.js",["124","125","126"],"import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nimport Profile from '../../shared/components/Auth/Profile';\r\n\r\nimport '../../index.css';\r\n\r\nimport { Descriptions } from 'antd';\r\n\r\n\r\n\r\nconst SponsorSummary = props => {\r\n\r\n    const data  = props.data;\r\n\r\n    return(\r\n        <div className = 'response-field'>\r\n            <p>Do you have a topic in mind?</p>\r\n            <Descriptions title=\"Sumamry\" column={1} >\r\n                {console.log(\"summary data:\", data)}\r\n                <Profile />\r\n                <Descriptions.Item label=\"Job Titles\">{data.roles.value}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Industries\">{data.industries.value}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Head count\">{data.headCounts.value}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Regions\">{data.regions.value}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Date 1\">{data.dates.value[0]}, {data.dates.value[1]}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Date 2\">{data.dates.value[2]}, {data.dates.value[3]}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Date 3\">{data.dates.value[4]}, {data.dates.value[5]}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Do you have a preferred topic?\">{data.topic.value[0] === 1 ? 'Yes' : 'No'}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Do you want to source the host?\">{data.host.value[0] === 1 ? 'Yes' : 'No'}</Descriptions.Item>\r\n            </Descriptions>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorSummary;",{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":6,"column":10,"nodeType":"133","messageId":"134","endLine":6,"endColumn":26},{"ruleId":"131","severity":1,"message":"135","line":10,"column":9,"nodeType":"133","messageId":"134","endLine":10,"endColumn":13},{"ruleId":"131","severity":1,"message":"136","line":36,"column":55,"nodeType":"133","messageId":"134","endLine":36,"endColumn":64},{"ruleId":"137","severity":1,"message":"138","line":21,"column":21,"nodeType":"139","endLine":21,"endColumn":43},{"ruleId":"137","severity":1,"message":"138","line":31,"column":25,"nodeType":"139","endLine":31,"endColumn":79},{"ruleId":"137","severity":1,"message":"138","line":34,"column":25,"nodeType":"139","endLine":34,"endColumn":74},{"ruleId":"131","severity":1,"message":"140","line":3,"column":25,"nodeType":"133","messageId":"134","endLine":3,"endColumn":28},{"ruleId":"131","severity":1,"message":"140","line":3,"column":25,"nodeType":"133","messageId":"134","endLine":3,"endColumn":28},{"ruleId":"131","severity":1,"message":"141","line":5,"column":78,"nodeType":"133","messageId":"134","endLine":5,"endColumn":85},{"ruleId":"131","severity":1,"message":"142","line":5,"column":87,"nodeType":"133","messageId":"134","endLine":5,"endColumn":99},{"ruleId":"131","severity":1,"message":"143","line":9,"column":7,"nodeType":"133","messageId":"134","endLine":9,"endColumn":22},{"ruleId":"144","severity":1,"message":"145","line":86,"column":8,"nodeType":"146","endLine":86,"endColumn":10,"suggestions":"147"},{"ruleId":"127","replacedBy":"148"},{"ruleId":"129","replacedBy":"149"},{"ruleId":"131","severity":1,"message":"150","line":6,"column":31,"nodeType":"133","messageId":"134","endLine":6,"endColumn":38},{"ruleId":"131","severity":1,"message":"151","line":182,"column":11,"nodeType":"133","messageId":"134","endLine":182,"endColumn":15},{"ruleId":"131","severity":1,"message":"141","line":5,"column":78,"nodeType":"133","messageId":"134","endLine":5,"endColumn":85},{"ruleId":"131","severity":1,"message":"142","line":5,"column":87,"nodeType":"133","messageId":"134","endLine":5,"endColumn":99},{"ruleId":"152","severity":1,"message":"153","line":17,"column":28,"nodeType":"154","messageId":"155","endLine":17,"endColumn":29,"fix":"156"},{"ruleId":"144","severity":1,"message":"145","line":62,"column":8,"nodeType":"146","endLine":62,"endColumn":10,"suggestions":"157"},{"ruleId":"131","severity":1,"message":"158","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":27},{"ruleId":"131","severity":1,"message":"159","line":1,"column":29,"nodeType":"133","messageId":"134","endLine":1,"endColumn":38},{"ruleId":"131","severity":1,"message":"160","line":3,"column":10,"nodeType":"133","messageId":"134","endLine":3,"endColumn":18},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'LinkedinOutlined' is defined but never used.","Identifier","unusedVar","'Text' is assigned a value but never used.","'isLoading' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Col' is defined but never used.","'Divider' is defined but never used.","'Descriptions' is defined but never used.","'DUMMY_USER_DATA' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchParams'. Either include it or remove the dependency array.","ArrayExpression",["163"],["161"],["162"],"'message' is defined but never used.","'prev' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"164","text":"165"},["166"],"'useReducer' is defined but never used.","'useEffect' is defined but never used.","'useAuth0' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},[476,477],"",{"desc":"167","fix":"169"},"Update the dependencies array to be: [searchParams]",{"range":"170","text":"171"},{"range":"172","text":"171"},[2802,2804],"[searchParams]",[2007,2009]]