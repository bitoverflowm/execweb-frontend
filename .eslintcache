[{"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\index.js":"1","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorAuth.js":"2","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequests.js":"3","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\pages\\AdminDashboard.js":"4","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\Home.js":"5","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\MainNavigation.js":"6","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\App.js":"7","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\NavLinks.js":"8","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\sponsorHome.js":"9","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequestDetails.js":"10","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\reportWebVitals.js":"11","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRole.js":"12","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetIndustry.js":"13","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHeadCount.js":"14","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRegion.js":"15","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsers.js":"16","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetDate.js":"17","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHost.js":"18","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetTopic.js":"19","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\SponsorRequest.js":"20","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Auth\\Profile.js":"21","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsersList.js":"22","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorSummary.js":"23"},{"size":532,"mtime":1613524438019,"results":"24","hashOfConfig":"25"},{"size":2276,"mtime":1613938349847,"results":"26","hashOfConfig":"25"},{"size":1786,"mtime":1612221303634,"results":"27","hashOfConfig":"25"},{"size":1879,"mtime":1612222265721,"results":"28","hashOfConfig":"25"},{"size":1465,"mtime":1613733712302,"results":"29","hashOfConfig":"25"},{"size":386,"mtime":1612170812349,"results":"30","hashOfConfig":"25"},{"size":2501,"mtime":1613684685775,"results":"31","hashOfConfig":"25"},{"size":760,"mtime":1613738008144,"results":"32","hashOfConfig":"25"},{"size":302,"mtime":1613735733091,"results":"33","hashOfConfig":"25"},{"size":1834,"mtime":1612225405328,"results":"34","hashOfConfig":"25"},{"size":362,"mtime":1611762160796,"results":"35","hashOfConfig":"25"},{"size":3198,"mtime":1613524438023,"results":"36","hashOfConfig":"25"},{"size":3085,"mtime":1613524438022,"results":"37","hashOfConfig":"25"},{"size":2623,"mtime":1613741469046,"results":"38","hashOfConfig":"25"},{"size":2607,"mtime":1613739791730,"results":"39","hashOfConfig":"25"},{"size":7664,"mtime":1613628308250,"results":"40","hashOfConfig":"25"},{"size":2581,"mtime":1613887927811,"results":"41","hashOfConfig":"25"},{"size":1833,"mtime":1612950621354,"results":"42","hashOfConfig":"25"},{"size":1799,"mtime":1612950715705,"results":"43","hashOfConfig":"25"},{"size":10144,"mtime":1613896161155,"results":"44","hashOfConfig":"25"},{"size":529,"mtime":1613872520887,"results":"45","hashOfConfig":"25"},{"size":7699,"mtime":1613897959813,"results":"46","hashOfConfig":"25"},{"size":476,"mtime":1613937695844,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"wdh0zt",{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\index.js",[],["102","103"],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorAuth.js",["104","105","106"],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequests.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\pages\\AdminDashboard.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\Home.js",["107","108","109","110"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Button, Layout, Row, Col, Typography } from 'antd';\r\nimport { Content} from 'antd/lib/layout/layout';\r\n\r\nimport jumboBig from './shared/assets/jumbo-home/jumbo-main.jpg';\r\nimport howItWorks from './shared/assets/jumbo-home/how-it-works.jpg';\r\nimport homeWhy from './shared/assets/jumbo-home/home-why.jpg';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Home = () => {\r\n    return(\r\n        <React.Fragment>\r\n            <Layout>\r\n                <Content className=\"home-jumbo-content\">\r\n                    <img src={jumboBig} />\r\n                    <Row >\r\n                        <Link to={`/sponsorHome/`} className=\"home-call-to-action\">\r\n                            <Button type=\"primary\">Apply to Sponsor</Button>\r\n                        </Link>\r\n                    </Row>\r\n                    <Row>\r\n                        <Title level={3} className=\"home-about-heading\">How it Works</Title>\r\n                    </Row>\r\n                    <Row>\r\n                        <img src={howItWorks} className=\"home-about-content\"/>\r\n                    </Row>\r\n                    <Row className=\"home-why-content-wrapper\">\r\n                        <img src={homeWhy} className=\"home-why-content\"/>\r\n                    </Row>                    \r\n                </Content>\r\n                \r\n            </Layout>\r\n        </React.Fragment>\r\n        );\r\n};\r\n\r\nexport default Home;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\MainNavigation.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\App.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Navigation\\NavLinks.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\sponsorHome.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\admin\\components\\SponsorshipRequestDetails.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRole.js",["111"],"import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { Checkbox, Row, Col, Input, message } from 'antd';\r\n\r\nimport '../../index.css';\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nconst DUMMY_JOB_TITLE = [\r\n    {\r\n        id: 'j1',\r\n        title: 'Chief Information Officer'\r\n    },\r\n    {\r\n        id: 'j2',\r\n        title: 'Chief Executive Officer'\r\n    },\r\n    {\r\n        id: 'j3',\r\n        title: 'Chief Technology Officer'\r\n    },\r\n    {\r\n        id: 'j4',\r\n        title: 'Chief Operations Officer'\r\n    },\r\n    {\r\n        id: 'j5',\r\n        title: 'Chief Scientist'\r\n    },\r\n    {\r\n        id: 'j6',\r\n        title: 'Chief Security Officer'\r\n    },\r\n    {\r\n        id: 'j7',\r\n        title: 'Chief Data Officer'\r\n    },\r\n    {\r\n        id: 'j8',\r\n        title: 'Chief Compliance Officer'\r\n    },\r\n    {\r\n        id: 'j9',\r\n        title: 'Chief Product Officer'\r\n    }\r\n];\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: true\r\n            };\r\n        case 'TEXT':\r\n            return {\r\n                ...state,\r\n                textinput: action.val,\r\n                isValid: true \r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nconst SponsorTargetRole = props => {\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '',\r\n        textinput: '',\r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, textinput, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid, textinput)\r\n    }, [id, value, textinput, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    const onTextSubmission = value => {\r\n        console.log('newPosition text Entry', value);\r\n\r\n        dispatch({\r\n            type: 'TEXT',\r\n            val: value\r\n        });\r\n        message.success(value + ' Added to your submission!');\r\n    }\r\n\r\n\r\n    return(\r\n        <div className = 'response-field'>\r\n            <p>What are the job titles of your target clients?</p>\r\n            <Row>\r\n                <Checkbox.Group onChange={clickHandler} className=\"check-box-wrapper\">\r\n                        {DUMMY_JOB_TITLE.map( title => (\r\n                            <div key={title.id} className=\"check-box\">\r\n                                <Checkbox key={title.id} value={title.title}>\r\n                                    {title.title}\r\n                                </Checkbox>\r\n                            </div>\r\n                        ))}\r\n                </Checkbox.Group>\r\n            </Row>\r\n            <Row className= 'other-input'>\r\n                <p>Have a custom job title in mind?</p>\r\n                <Search placeholder=\"Enter job title here\" allowClear enterButton=\"+\" onSearch={onTextSubmission} />\r\n            </Row>\r\n            \r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetRole;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetIndustry.js",["112"],"import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { Checkbox, Row, Col, Input, message } from 'antd';\r\n\r\nimport { FireTwoTone, ExperimentTwoTone, CodeTwoTone, BankTwoTone } from '@ant-design/icons';\r\n\r\nimport '../../index.css';\r\n\r\nconst { Search } = Input;\r\n\r\nconst DUMMY_INDUSTRIES = [\r\n    {\r\n        id: 'i1',\r\n        title: 'Financial Services',\r\n        icon: <BankTwoTone twoToneColor=\"#FFB454\"/>\r\n    },\r\n    {\r\n        id: 'i2',\r\n        title: 'Technology',\r\n        icon: <CodeTwoTone twoToneColor=\"#AFE2DE\"/>\r\n    },\r\n    {\r\n        id: 'i3',\r\n        title: 'Pharma & Medicine',\r\n        icon: <ExperimentTwoTone twoToneColor=\"#FFB454\"/>\r\n    },\r\n    {\r\n        id: 'i4',\r\n        title: 'Energy',\r\n        icon: <FireTwoTone twoToneColor=\"#60C6BE\"/>\r\n    }\r\n]; \r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: true\r\n            };\r\n        case 'TEXT':\r\n            return {\r\n                ...state,\r\n                textinput: action.val,\r\n                isValid: true \r\n            };  \r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nconst SponsorTargetIndustry = props => {\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        textinput: '',\r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, textinput, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid, textinput)\r\n    }, [id, value, textinput, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    const onTextSubmission = value => {\r\n        console.log('newPosition text Entry', value);\r\n\r\n        dispatch({\r\n            type: 'TEXT',\r\n            val: value\r\n        });\r\n        message.success(value + ' Added to your submission!');\r\n    };\r\n\r\n    return(\r\n        <div className = 'response-field'>\r\n            <p>What industries are your target clients in?</p>\r\n            <Row >\r\n                <Checkbox.Group onChange={clickHandler} className=\"check-box-wrapper\">\r\n                    {DUMMY_INDUSTRIES.map( title => (\r\n                        <div key={title.id} className=\"check-box\">\r\n                            <Checkbox key={title.id} value={title.title}>\r\n                                {title.icon}{title.title}\r\n                            </Checkbox>\r\n                        </div>\r\n                        ))}\r\n                </Checkbox.Group>\r\n            </Row>\r\n            <Row className= 'other-input'>\r\n                <p>Have a custom industry in mind?</p>\r\n                <Search placeholder=\"Enter industry here\" allowClear enterButton=\"+\" onSearch={onTextSubmission} />\r\n            </Row>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetIndustry;\r\n","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHeadCount.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetRegion.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsers.js",["113","114","115","116"],"import React, { useReducer, useEffect, useState } from 'react';\r\n\r\nimport '../../index.css';\r\n\r\nimport { Checkbox, Row, Col, Typography, Avatar, Spin, Popover, Button, Tag, Divider, Descriptions } from 'antd';\r\n\r\nconst { Text } = Typography;\r\n\r\nconst DUMMY_USER_DATA = [\r\n    {\r\n        id: '1',\r\n        first_name: 'Sterling',\r\n        last_name: 'Archer',\r\n        position: 'Spy',\r\n        company: 'Figgis Agency',\r\n        avatar: 'https://pbs.twimg.com/profile_images/473693408649674753/Fjo74UD2.png'\r\n    },\r\n    {\r\n        id: '2',\r\n        first_name: 'Bob',\r\n        last_name: 'Burger',\r\n        position: 'Burger Maker',\r\n        company: 'Bobs Burger',\r\n        avatar: 'https://www.gannett-cdn.com/presto/2020/06/12/PPHX/e7207da9-6fbe-467b-b63e-ac44e95db582-BobsBurgers_2019_KeyPoses_Bob_1.jpg?crop=3356,1888,x0,y480&width=3200&height=1801&format=pjpg&auto=webp'\r\n    },\r\n    {\r\n        id: '3',\r\n        first_name: 'Kristin',\r\n        last_name: 'Watson',\r\n        position: 'Project Manager',\r\n        company: 'Heinemann',\r\n        avatar: 'https://pbs.twimg.com/profile_images/473693408649674753/Fjo74UD2.png'\r\n    }\r\n]; \r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: true\r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst SponsorTargetUsers = props => {\r\n    \r\n    const searchParams = props.value;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [filteredUsers, setFilteredUsers] = useState();\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            setIsLoading(true);\r\n            try\r\n            {\r\n                console.log(\"searching on the following params: \",  searchParams);\r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/sponsors/userSearch', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        jobTitles  : searchParams.roles.value,\r\n                        industries : searchParams.industries.value,\r\n                    })\r\n                });\r\n\r\n                const responseData = await response.json();\r\n\r\n                if(!response.ok){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                console.log('Filtered users:', responseData)\r\n                setFilteredUsers(responseData.filteredUsers);\r\n                setIsLoading(false);\r\n            } catch (err) {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid)\r\n    }, [id, value, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    return(\r\n        <div className = 'response-field'> \r\n            <p>\r\n                <Text>The following executives best match your target client parameters.</Text>\r\n                <br></br>\r\n                <Text keyboard> Select up to 15 tech executives you would like to have attend your virtual round table you sponsor.</Text>\r\n            </p>\r\n                \r\n            <Row>\r\n                {!isLoading && filteredUsers\r\n                    ? (\r\n                        <Checkbox.Group onChange={clickHandler} className=\"check-box-wrapper\">\r\n                            {filteredUsers.map( user => (\r\n                                <div key={user.item[\"_id\"]} className=\"check-box\">\r\n                                        <Row>\r\n                                            <Col span= {1}className=\"check-box-style\">\r\n                                                <Checkbox value={user.item[\"_id\"]}/>\r\n                                            </Col>\r\n                                            <Col span={9}>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Avatar size={64} src={user.item[\"Personal Photo\"]}/>\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={user.item[\"Personal Description\"]} title=\"Description\" overlayClassName=\"popover-content\">\r\n                                                        <Button type=\"primary\">Description</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={user.item[\"Experience\"]} title=\"Experience\" overlayClassName=\"popover-content\">\r\n                                                        <Button>Experience</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                            </Col>\r\n                                            <Col span={14}>\r\n                                                <Row>\r\n                                                    <Text strong>{\" \" + user.item[\"First Name\"] + \" \" + user.item[\"Last Name\"]}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Title: {user.item.Position}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Company: {user.item.Company}</Text>\r\n                                                </Row>   \r\n                                                <Row>\r\n                                                    <Text>Location: {user.item.State}</Text>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag >Est. Employees: {user.item[\"# of Employees\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Industry: {user.item[\"Industry\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Est. Revenue: {user.item[\"Estimated Revenues\"]}</Tag>\r\n                                                </Row> \r\n                                            </Col>\r\n                                        </Row>\r\n                                </div>\r\n                            ))}\r\n                        </Checkbox.Group>\r\n                    )\r\n                    : (\r\n                        <Spin />\r\n                    )\r\n                }\r\n            </Row>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetUsers;",["117","118"],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetDate.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetHost.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetTopic.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\pages\\SponsorRequest.js",["119"],"import React, { useState, useReducer, useCallback } from 'react';\r\n\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nimport { Form, Steps, Button, message, Row, Col } from 'antd';\r\n\r\nimport SponsorAuth from '../components/SponsorAuth';\r\nimport SponsorTargetRole from '../components/SponsorTargetRole';\r\nimport SponsorTargetIndustry from '../components/SponsorTargetIndustry';\r\nimport SponsorTargetHeadCount from '../components/SponsorTargetHeadCount';\r\nimport SponsorTargetRegion from '../components/SponsorTargetRegion';\r\nimport SponsorSummary from '../components/SponsorSummary';\r\nimport SponsorTargetUsersList from '../components/SponsorTargetUsersList';\r\nimport SponsorTargetDate from '../components/SponsorTargetDate';\r\nimport SponsorTargetTopic from '../components/SponsorTargetTopic';\r\nimport SponsorTargetHost from '../components/SponsorTargetHost';\r\n\r\nimport '../../index.css';\r\nimport formImage0 from '../../shared/assets/sponsor-request-images/0.jpg';\r\nimport formImage1 from '../../shared/assets/sponsor-request-images/1.jpg';\r\nimport formImage2 from '../../shared/assets/sponsor-request-images/2.jpg';\r\nimport formImage3 from '../../shared/assets/sponsor-request-images/3.jpg';\r\nimport formImage4 from '../../shared/assets/sponsor-request-images/4.jpg';\r\nimport formImage5 from '../../shared/assets/sponsor-request-images/5.jpg';\r\nimport formImage6 from '../../shared/assets/sponsor-request-images/6.jpg';\r\n\r\nimport logo from '../../shared/assets/logo2.png';\r\n\r\nconst { Step } = Steps;\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SELECT':\r\n            let formIsValid = true;\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId] : { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst SponsorRequest = () => {\r\n\r\n    const [current, setCurrent] = useState(0);\r\n    \r\n    const { user } = useAuth0();\r\n\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n            inputs: {\r\n                username: { value: '', isValid: false},\r\n                roles: { value: '', isValid: false},\r\n                industries: { value: '', isValid: false}\r\n            }, isValid: false});\r\n\r\n    const formUpdateHandler = useCallback(( id, value, isValid, textInput = null ) => { \r\n        console.log(`formUpdateHandler id: ${id} value: ${value} textInput: ${textInput} isValid: ${isValid}`);\r\n        if(textInput && value){\r\n            value.push(textInput);\r\n        } else if (textInput && !value){\r\n            value = textInput;\r\n        }\r\n        dispatch({type: 'SELECT', value: value, inputId: id, isValid: isValid});\r\n    }, []);\r\n\r\n    const steps = [\r\n        { \r\n            title: 'Step 1', \r\n            content:  <SponsorAuth \r\n                        id=\"username\"\r\n                        formUpdateHandler={formUpdateHandler} \r\n                        value={formState.inputs.username}\r\n                        />,\r\n            image: <img src={formImage0} alt=\"formImage0\" className=\"response-field-image\" />\r\n                        \r\n        },\r\n        { \r\n            title: 'Step 2', \r\n            content: \r\n                <SponsorTargetRole\r\n                    id=\"roles\"\r\n                    formUpdateHandler={formUpdateHandler}\r\n                    value={formState.inputs.roles}/>,\r\n            image: <img src={formImage1} alt=\"formImage1\" className=\"response-field-image\" />\r\n        },\r\n        { \r\n            title: 'Step 3', \r\n            content: \r\n            <SponsorTargetIndustry \r\n                id=\"industries\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.industries}/>,\r\n            image: <img src={formImage2} alt=\"formImage2\" className=\"response-field-image\" /> \r\n        },\r\n        { \r\n            title: 'Step 4', \r\n            content: \r\n            <SponsorTargetHeadCount \r\n                id=\"headCounts\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.headCounts}/>,\r\n            image: <img src={formImage3} alt=\"formImage3\" className=\"response-field-image\" /> \r\n        },\r\n        { \r\n            title: 'Step 5', \r\n            content: \r\n            <SponsorTargetRegion\r\n                id=\"regions\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.regions}/>,\r\n            image: <img src={formImage4} alt=\"formImage4\" className=\"response-field-image\" />\r\n        },\r\n        { \r\n            title: 'Step 6', \r\n            content: \r\n            <SponsorTargetUsersList \r\n                id=\"users\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs}/>,\r\n            image: <img src={formImage5} alt=\"formImage5\" className=\"response-field-image\" />\r\n        },\r\n        { \r\n            title: 'Step 7', \r\n            content: \r\n            <SponsorTargetDate \r\n                id=\"dates\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.dates}/>,\r\n            image: <img src={formImage6} alt=\"formImage6\" className=\"response-field-image\"/>\r\n        },\r\n        { \r\n            title: 'Step 8', \r\n            content: \r\n            <SponsorTargetTopic \r\n                id=\"topic\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.topic}/>,\r\n            image: <img src={formImage6} alt=\"formImage6\" className=\"response-field-image\"/>\r\n        },\r\n        { \r\n            title: 'Step 9', \r\n            content: \r\n            <SponsorTargetHost \r\n                id=\"host\"\r\n                formUpdateHandler={formUpdateHandler}\r\n                value={formState.inputs.host}/>,\r\n            image: <img src={formImage6} alt=\"formImage6\" className=\"response-field-image\"/>\r\n        },\r\n        { \r\n            title: 'Step 10', \r\n            content: \r\n            <SponsorSummary \r\n                id=\"summary\"\r\n                data={formState.inputs}/>,\r\n            image: <img src={formImage6} alt=\"formImage6\" className=\"response-field-image\"/>\r\n        }\r\n\r\n    ];\r\n\r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n        console.log(\"triggering next: current formState: \", formState);\r\n    };\r\n\r\n    // Prev is currently disabled as it jsut complicated the state management\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n\r\n    const onFinish = async event => {\r\n        console.log('Submitting completed form: ', formState);\r\n\r\n        try {\r\n            const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/sponsors/sponsorRequest', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    jobTitles  : formState.inputs.roles.value,\r\n                    industries : formState.inputs.industries.value, \r\n                    clientList : 'text.csv',\r\n                    headCounts : formState.inputs.headCounts.value,\r\n                    regions    : formState.inputs.regions.value,\r\n                    users      : formState.inputs.users.value,\r\n                    dateStart  : formState.inputs.dates.value[0],\r\n                    dateEnd    : formState.inputs.dates.value[1],\r\n                    topic      : formState.inputs.topic.value[0],\r\n                    host       : formState.inputs.host.value[0],\r\n                    sponsor    : 1,\r\n                })\r\n            });\r\n            \r\n            const responseData = await response.json();\r\n            console.log('Server response: ', responseData);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }       \r\n        \r\n      };\r\n\r\n    return (\r\n        <Form className = \"site-layout-content\" onFinish={onFinish}>\r\n            <Steps current={current}>\r\n                {console.log( \"hard look at formstate \", formState )}\r\n                {steps.map(item => (\r\n                    <Step key={item.title} hidden />\r\n                ))}\r\n            </Steps>\r\n            \r\n            <Row>\r\n                <Col span={12}>\r\n                    <div className=\"response-field-wrapper\">\r\n                        <Row>\r\n                            <img src={logo} alt=\"Logo\" className=\"logo\"/>\r\n                        </Row>\r\n                        <Row className=\"response-field\">\r\n                            {steps[current].content}\r\n                        </Row>\r\n\r\n                        <div className=\"response-action\">\r\n                            {current < steps.length - 1 && user && (\r\n                                <Button type=\"primary\" onClick={() => next()}>\r\n                                    Next\r\n                                </Button>\r\n                            )}\r\n                            {process.env.REACT_APP_DEV && (\r\n                                <Button type=\"primary\" onClick={() => next()}>\r\n                                    Next\r\n                                </Button>\r\n                            )}\r\n                            {/*current > 0 && (\r\n                                <Button onClick={() => prev()}>\r\n                                    Previous\r\n                                </Button>\r\n                            )*/}                \r\n                            {current === steps.length - 1 && (\r\n                                <Button className=\"response-submit\" type=\"primary\" htmlType=\"submit\" onClick={() => message.success('Processing complete!')}>\r\n                                    Done\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col span={10}>\r\n                    {steps[current].image}\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    )\r\n};\r\n\r\nexport default SponsorRequest;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\shared\\components\\Auth\\Profile.js",[],"C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorTargetUsersList.js",["120","121","122","123"],"import React, { useReducer, useEffect, useState } from 'react';\r\n\r\nimport '../../index.css';\r\n\r\nimport { Checkbox, Row, Col, Typography, Avatar, Spin, Popover, Button, Tag, Divider, Descriptions, List } from 'antd';\r\n\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\nconst { Text } = Typography;\r\n\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CLICK':\r\n            return {\r\n                ...state,\r\n                value: [... new Set([...state.value].concat(action.val))],\r\n                isValid: true\r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst SponsorTargetUsersList = props => {\r\n    \r\n    const searchParams = props.value;\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [filteredUsers, setFilteredUsers] = useState();\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            setIsLoading(true);\r\n            try\r\n            {\r\n                console.log(\"searching on the following params: \",  searchParams);\r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + '/sponsors/userSearch', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type' : 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        jobTitles  : searchParams.roles.value,\r\n                        industries : searchParams.industries.value,\r\n                    })\r\n                });\r\n\r\n                const responseData = await response.json();\r\n\r\n                if(!response.ok){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                console.log('Filtered users:', responseData)\r\n                setFilteredUsers(responseData.filteredUsers);\r\n                setIsLoading(false);\r\n            } catch (err) {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        sendRequest();\r\n    }, []);\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: '', \r\n        isValid: false\r\n    });\r\n\r\n    const { id, formUpdateHandler } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        formUpdateHandler(id, value, isValid)\r\n    }, [id, value, isValid, formUpdateHandler]);\r\n\r\n    const clickHandler = checkedValues => {\r\n        console.log('Selected value', checkedValues);\r\n        dispatch({\r\n            type: 'CLICK', \r\n            val: checkedValues\r\n        });\r\n    };\r\n\r\n    return(\r\n        <div className = 'response-field'> \r\n            <p>\r\n                <Text>The following executives best match your target client parameters.</Text>\r\n                <br></br>\r\n                <Text keyboard> Select up to 15 tech executives you would like to have attend your virtual round table you sponsor.</Text>\r\n            </p>\r\n                \r\n            <Row>\r\n                {!isLoading && filteredUsers\r\n                    ? (\r\n                        <Checkbox.Group onChange={clickHandler} className= \"user-checkbox-wrapper\">\r\n                            <List                                 \r\n                                dataSource ={filteredUsers}\r\n                                pagination={{\r\n                                    onChange: page => {\r\n                                        console.log(page);\r\n                                    },\r\n                                    pageSize: 3,\r\n                                    showSizeChanger : false\r\n                                }}\r\n                                renderItem={\r\n                                    item => (\r\n                                        <List.Item key={item.item[\"_id\"]} className=\"check-box\">\r\n                                            <Col span= {1}className=\"check-box-style\">\r\n                                                <Checkbox value={ item.item[\"_id\"] }/>\r\n                                            </Col>\r\n                                            <Col span={9}>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Avatar size={64} \r\n                                                        src= {item.item[\"Personal Photo\"] !== 'Image NA' && item.item[\"Personal Photo\"] }\r\n                                                        icon = { item.item[\"Personal Photo\"] === 'Image NA' && <UserOutlined /> }\r\n                                                            />\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={item.item[\"Personal Description\"]} title=\"Description\" overlayClassName=\"popover-content\">\r\n                                                        <Button type=\"primary\">Description</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                                <div className=\"avatar-wrapper\">\r\n                                                    <Popover content={item.item[\"Experience\"]} title=\"Experience\" overlayClassName=\"popover-content\">\r\n                                                        <Button>Experience</Button>\r\n                                                    </Popover>\r\n                                                </div>\r\n                                            </Col>\r\n                                            <Col span={13}>\r\n                                                <Row>\r\n                                                    <Text strong>{\" \" + item.item[\"First Name\"] + \" \" + item.item[\"Last Name\"]}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Title: {item.item.Position}</Text>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Text>Company: {item.item.Company}</Text>\r\n                                                </Row>   \r\n                                                <Row>\r\n                                                    <Text>Location: {item.item.State}</Text>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag >Est. Employees: {item.item[\"# of Employees\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Industry: {item.item[\"Industry\"]}</Tag>\r\n                                                </Row>\r\n                                                <Row className=\"tag-wrapper\">\r\n                                                    <Tag>Est. Revenue: {item.item[\"Estimated Revenues\"]}</Tag>\r\n                                                </Row> \r\n                                            </Col>\r\n                                        </List.Item>\r\n                                    )\r\n                                }\r\n                            />\r\n                        </Checkbox.Group>\r\n                    )\r\n                    : (\r\n                        <Spin />\r\n                    )\r\n                }\r\n            </Row>\r\n        </div>\r\n    );   \r\n}\r\n\r\nexport default SponsorTargetUsersList;","C:\\Users\\rthap\\Documents\\ExecWeb\\execweb-frontend\\src\\sponsors\\components\\SponsorSummary.js",["124","125","126","127","128","129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":6,"column":10,"nodeType":"136","messageId":"137","endLine":6,"endColumn":26},{"ruleId":"134","severity":1,"message":"138","line":10,"column":9,"nodeType":"136","messageId":"137","endLine":10,"endColumn":13},{"ruleId":"134","severity":1,"message":"139","line":36,"column":55,"nodeType":"136","messageId":"137","endLine":36,"endColumn":64},{"ruleId":"134","severity":1,"message":"140","line":4,"column":31,"nodeType":"136","messageId":"137","endLine":4,"endColumn":34},{"ruleId":"141","severity":1,"message":"142","line":18,"column":21,"nodeType":"143","endLine":18,"endColumn":43},{"ruleId":"141","severity":1,"message":"142","line":28,"column":25,"nodeType":"143","endLine":28,"endColumn":79},{"ruleId":"141","severity":1,"message":"142","line":31,"column":25,"nodeType":"143","endLine":31,"endColumn":74},{"ruleId":"134","severity":1,"message":"140","line":3,"column":25,"nodeType":"136","messageId":"137","endLine":3,"endColumn":28},{"ruleId":"134","severity":1,"message":"140","line":3,"column":25,"nodeType":"136","messageId":"137","endLine":3,"endColumn":28},{"ruleId":"134","severity":1,"message":"144","line":5,"column":78,"nodeType":"136","messageId":"137","endLine":5,"endColumn":85},{"ruleId":"134","severity":1,"message":"145","line":5,"column":87,"nodeType":"136","messageId":"137","endLine":5,"endColumn":99},{"ruleId":"134","severity":1,"message":"146","line":9,"column":7,"nodeType":"136","messageId":"137","endLine":9,"endColumn":22},{"ruleId":"147","severity":1,"message":"148","line":86,"column":8,"nodeType":"149","endLine":86,"endColumn":10,"suggestions":"150"},{"ruleId":"130","replacedBy":"151"},{"ruleId":"132","replacedBy":"152"},{"ruleId":"134","severity":1,"message":"153","line":171,"column":11,"nodeType":"136","messageId":"137","endLine":171,"endColumn":15},{"ruleId":"134","severity":1,"message":"144","line":5,"column":78,"nodeType":"136","messageId":"137","endLine":5,"endColumn":85},{"ruleId":"134","severity":1,"message":"145","line":5,"column":87,"nodeType":"136","messageId":"137","endLine":5,"endColumn":99},{"ruleId":"154","severity":1,"message":"155","line":17,"column":28,"nodeType":"156","messageId":"157","endLine":17,"endColumn":29,"fix":"158"},{"ruleId":"147","severity":1,"message":"148","line":62,"column":8,"nodeType":"149","endLine":62,"endColumn":10,"suggestions":"159"},{"ruleId":"134","severity":1,"message":"160","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":27},{"ruleId":"134","severity":1,"message":"161","line":1,"column":29,"nodeType":"136","messageId":"137","endLine":1,"endColumn":38},{"ruleId":"134","severity":1,"message":"140","line":5,"column":10,"nodeType":"136","messageId":"137","endLine":5,"endColumn":13},{"ruleId":"134","severity":1,"message":"162","line":5,"column":15,"nodeType":"136","messageId":"137","endLine":5,"endColumn":23},{"ruleId":"134","severity":1,"message":"138","line":7,"column":9,"nodeType":"136","messageId":"137","endLine":7,"endColumn":13},{"ruleId":"163","severity":1,"message":"164","line":17,"column":45,"nodeType":"165","messageId":"166","endLine":17,"endColumn":46},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'LinkedinOutlined' is defined but never used.","Identifier","unusedVar","'Text' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'Col' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Divider' is defined but never used.","'Descriptions' is defined but never used.","'DUMMY_USER_DATA' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchParams'. Either include it or remove the dependency array.","ArrayExpression",["169"],["167"],["168"],"'prev' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"170","text":"171"},["172"],"'useReducer' is defined but never used.","'useEffect' is defined but never used.","'Checkbox' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},[476,477],"",{"desc":"173","fix":"175"},"Update the dependencies array to be: [searchParams]",{"range":"176","text":"177"},{"range":"178","text":"177"},[2802,2804],"[searchParams]",[2007,2009]]